(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var s=e.g.document;if(!t&&s&&(s.currentScript&&(t=s.currentScript.src),!t)){var i=s.getElementsByTagName("script");if(i.length)for(var a=i.length-1;a>-1&&!t;)t=i[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=class{constructor(e,t,s,i,a,h){this.bar=new Phaser.GameObjects.Graphics(e),this.x=t,this.y=s,this.maxLife=i,this.currentHealth=i,this.percent=1,this.width=a||80,this.height=h||14,this.draw(),e.add.existing(this.bar)}decrease(e){this.currentHealth-=e,this.currentHealth<0&&(this.currentHealth=0),this.percent=this.currentHealth/this.maxLife,this.draw()}draw(){this.bar.clear(),this.bar.fillStyle(16777215),this.bar.fillRect(this.x+2,this.y+2,this.width,this.height),this.percent<.3?this.bar.fillStyle(16711680):this.bar.fillStyle(65280);var e=Math.floor(this.percent*this.width);this.bar.fillRect(this.x+2,this.y+2,e,this.height)}},s=class{constructor(e,t,s,i){this.x=t,this.y=s,this.maxLives=i,this.currentLives=i,this.hearts=e.add.group({key:"heart",repeat:this.maxLives-1,setXY:{x:this.x,y:this.y,stepX:32}})}decrease(e){this.currentLives-=e,this.currentLives<0&&(this.currentLives=0),this.hearts.getChildren().forEach(((e,t)=>{e.setVisible(t<this.currentLives)}))}},i=class{constructor(e,t,i,a,h,r){this.speed=a,this.weapon=h,this.health=r,this.sprite=e.physics.add.sprite(t,i,"player"),this.sprite.setCollideWorldBounds(!0),this.sprite.player=this,this.hearts=new s(e,30,830,this.health),this.explosion=e.physics.add.sprite(this.sprite.x,this.sprite.y,"explosion")}setSpeed=e=>{this.speed=e};setWeapons=e=>{this.weapon=e};setVelocityX=e=>{this.sprite.setVelocityX(e)};setVelocityY=e=>{this.sprite.setVelocityY(e)};decreaseLife(e){alert("oops"),this.sprite.scene.tweens.add({targets:this.sprite,x:this.sprite.x+Phaser.Math.Between(-10,10),y:this.sprite.y+Phaser.Math.Between(-10,10),duration:100,repeat:5,ease:"Linear",alpha:0,yoyo:!0})}destroy(){this.explosion.play("explode"),this.sprite.destroy()}},a=e.p+"bb6ca2cb56b8adeeb008.png",h=e.p+"c0d3e7fd64b625820d64.png",r=e.p+"6f9d937e56f3be8b48c1.png",l=e.p+"773632788d3c5029a4d8.png",o=e.p+"9d6cef2631e050830245.png",n=e.p+"05bd5dbfa1e869a44f4d.png",p=e.p+"e519d73b7a7adf06c762.png",d=e.p+"aa016ede56a3bd62725e.png",c=e.p+"b731a2c802783424d4ad.wav",y=e.p+"6654ea4cc92416626e7a.wav",u=e.p+"9d38b45d785aa2e094da.wav",g=e.p+"95f835c0e1e77b8ae93a.wav",f=e.p+"90d9fdaff3aef363eb64.png",b=e.p+"80fbe404e9e7ebcae073.png",w=e.p+"ce12f49b243e2b0153f3.png",m={type:Phaser.AUTO,width:1500,height:900,physics:{default:"arcade",arcade:{gravity:{y:0}}},scene:{preload:function(){this.load.image("player",a),this.load.image("heart",h),this.load.image("bullet",r),this.load.image("playerBullet",l),this.load.image("alien",n),this.load.image("bossAlien",p),this.load.image("bossAlienBullet",o),this.load.image("space",d),this.load.image("x2Upgrade",w),this.load.audio("explosionSound",c),this.load.audio("shootSound",y),this.load.audio("impactScreamSound",u),this.load.audio("level1Music",g),this.load.spritesheet("player-1-explosion",f,{frameWidth:230,frameHeight:125,endFrame:9}),this.load.spritesheet("boss-alien-explosion",b,{frameWidth:600,frameHeight:420,endFrame:10})},create:function(){V=this.add.tileSprite(0,0,1500,900,"space"),V.setOrigin(0,0),x=new i(this,m.width/2,m.height-150,H.playerSpeed,H.playerWeapon,H.playerHealth),v=this.input.keyboard.createCursorKeys(),S=this.physics.add.group(),B=this.physics.add.group();class e extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s,i,a){super(e,0,0,t),this.scene=e,this.shootDelay=s,this.movementSpeed=i,this.spawning=a,this.scene.physics.world.enable(this),this.spawning||this.startShooting(),this.spawning||this.startMoving(),this.dropUpgrade={x2:()=>{let e=A.create(this.x,this.y,"x2Upgrade");e.enable=e=>{e.setSpeed(1.5*H.playerSpeed),e.setWeapons("double-bullets")},e.expire=e=>{e.setSpeed(H.playerSpeed),e.setWeapons("bullets")},e.setVelocityY(200)}}}setup(e,t){this.setPosition(e,t),this.setActive(!0),this.setVisible(!0)}startShooting(){if(E.get("noAlienShooting"))return;let e=()=>{S.create(this.x,this.y+this.height/2,"bullet").setVelocityY(300),this.active&&(this.nextShootEvent=this.scene.time.delayedCall(Phaser.Math.Between(350,this.shootDelay),e,[],this))},t=Phaser.Math.Between(0,this.shootDelay);this.nextShootEvent=this.scene.time.delayedCall(t,e,[],this)}startMoving(){let e=()=>{if(!this.active)return;let t,s=Phaser.Math.Between(-1,1),i=Phaser.Math.Between(0,100),a=this.x+s*i;(a>this.scene.game.config.width-this.width||a<0)&&(a=this.x),t=this.healthBar?[this,this.healthBar.bar]:[this],this.scene.tweens.add({targets:t,x:a,duration:this.movementSpeed,ease:"Linear",onComplete:this.active?e:null})},t=Phaser.Math.Between(0,this.movementSpeed);this.nextMoveEvent=this.scene.time.delayedCall(t,e,[],this)}}class s extends e{constructor(e){super(e,"bossAlien",1800,400,!0),this.life=20,this.healthBar=new t(this.scene,this.x-41,this.y+40,this.life)}setup(e,t){this.setPosition(e,-100),this.spawning=!0,this.scene.tweens.add({targets:this,y:t,duration:1300,ease:"Linear",onComplete:()=>{this.startMoving(),this.startShooting(),this.spawning=!1}}),this.setActive(!0),this.setVisible(!0)}setLife(e){this.healthBar.decrease(this.life-e),this.life=e}startShooting(){if(E.get("noAlienShooting"))return;let e=()=>{if(!this.active)return;let t=S.create(this.x,this.y+this.height/2-70,"bossAlienBullet"),s=Phaser.Math.Angle.Between(this.x,this.y,x.sprite.x,x.sprite.y),i=350*Math.cos(s),a=350*Math.sin(s);t.setVelocity(i,a),this.active&&(this.nextShootEvent=this.scene.time.delayedCall(Phaser.Math.Between(270,this.shootDelay),e,[],this))};e()}}let a=this.physics.add.group({classType:class extends e{constructor(e){super(e,"alien",4300,1200)}}});for(let e=0;e<H.regularAliens;e++)a.get().setup(100+130*e,100);A=this.physics.add.group(),P=this.sound.add("explosionSound"),M=this.sound.add("shootSound"),C=this.sound.add("impactScreamSound"),"true"!==E.get("noMusic")&&(L||(L=this.sound.add("level1Music"),L.setVolume(.8),L.play())),"true"===E.get("dropUpgrades")&&a.getChildren()[5].dropUpgrade.x2(),this.anims.create({key:"explode",frames:this.anims.generateFrameNumbers("player-1-explosion",{start:0,end:8,first:0}),frameRate:23,repeat:0,hideOnComplete:!0}),this.anims.create({key:"bossAlienExplode",frames:this.anims.generateFrameNumbers("boss-alien-explosion",{start:0,end:10,first:0}),frameRate:23,repeat:0,hideOnComplete:!0}),this.physics.add.overlap(B,a,(function(e,t){e.destroy(),P.play(),t.nextShootEvent&&t.nextShootEvent.remove(),t.destroy(),Phaser.Math.Between(0,100)>80&&t.dropUpgrade.x2();let i=!1;if(a.getChildren().forEach((e=>{e.active&&(i=!0)})),!1===i&&x.sprite.active){let e=this.physics.add.group({classType:s});Y=e.get(),Y.setup(m.width/2,170),this.physics.add.overlap(Y,B,(function(e,t){if(t.destroy(),!e.spawning&&(e.setLife(e.life-1),0===e.life&&x.sprite.active)){e.destroy(),e.healthBar.bar.destroy(),this.physics.add.sprite(e.x,e.y,"bossAlienExplode").play("bossAlienExplode"),P.play();let t=this.add.text(0,0,"You win!",{font:'64px "Arial Black", "Arial Bold", "Arial", sans-serif',fill:"#fff"}).setOrigin(.5,.5).setPosition(m.width/2,m.height/2).setVisible(!1);this.time.delayedCall(900,(function(){t.setVisible(!0)}),[],this)}}),null,this)}}),null,this),this.physics.add.overlap(x.sprite,S,(function(e,t){if(e.player.decreaseLife(1),t.destroy(),C.play(),x.health>0)return;t.destroy(),x.destroy();let s=this.add.text(0,0,"You lose",{font:'64px "Arial Black", "Arial Bold", "Arial", sans-serif',fill:"#fff"}).setOrigin(.5,.5).setPosition(m.width/2,m.height/2).setVisible(!1),i=this.add.text(0,0,"Hit <Space> to restart",{font:'34px "Arial Black", "Arial Bold", "Arial", sans-serif',fill:"#fff"}).setOrigin(.5,.5).setPosition(m.width/2,m.height/2+100).setVisible(!1);this.time.delayedCall(600,(function(){s.setVisible(!0)}),[],this),this.time.delayedCall(2100,(function(){i.setVisible(!0),D=!0}),[],this)}),null,this),this.physics.add.overlap(x.sprite,A,(function(e,t){t.enable(e.player),t.destroy(),this.time.delayedCall(3500,(function(){t.expire(e.player)}),[],this)}),null,this)},update:function(){x.sprite.active&&(v.left.isDown?x.setVelocityX(-x.speed):v.right.isDown?x.setVelocityX(x.speed):v.down.isDown?x.setVelocityY(x.speed):v.up.isDown?x.setVelocityY(-x.speed):(x.setVelocityX(0),x.setVelocityY(0))),Phaser.Input.Keyboard.JustDown(v.space)&&(x.sprite.active?"bullets"===x.weapon?(B.create(x.sprite.x,x.sprite.y-x.sprite.height+40,"playerBullet").setVelocityY(-x.speed),M.play()):"double-bullets"===x.weapon&&(B.create(x.sprite.x-20,x.sprite.y-x.sprite.height+40,"playerBullet").setVelocityY(-x.speed),B.create(x.sprite.x+20,x.sprite.y-x.sprite.height+40,"playerBullet").setVelocityY(-x.speed),M.play()):D&&(D=!1,this.scene.restart())),V.tilePositionY-=1.1}}};let x,v,S,B,A,V,P,M,C,L,Y,E=new URLSearchParams(window.location.search),H={playerSpeed:330,playerWeapon:"bullets",playerHealth:3,regularAliens:E.get("regularAliens")?E.get("regularAliens"):11},D=(new Phaser.Game(m),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,